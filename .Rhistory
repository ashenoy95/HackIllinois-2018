head(concussion.logit.df)
concussion.expanded = concussion[rep(seq_len(nrow(concussion)), concussion$count), 1:4]
concussion.logit = glm(concussion_id~gender+sport+academic_year, family = binomial,
data = concussion.expanded)
concussion.logit.df = concussion.expanded
concussion.logit.df$.fitted = fitted.values(concussion.logit)
concussion.logit.df$.resid = residuals(concussion.logit, type = 'response')
ggplot(unique(concussion.logit.df), aes(x=.fitted, y=.resid)) + geom_point() +
geom_smooth(method="loess", method.args=list(degree=1))
concussion.logit = glm(concussion_id~gender+sport+academic_year+gender:sport, family = binomial, data = concussion.expanded)
concussion.logit.df = concussion.expanded
concussion.logit.df$.fitted = fitted.values(concussion.logit)
concussion.logit.df$.resid = residuals(concussion.logit, type = 'response')
ggplot(unique(concussion.logit.df), aes(x=.fitted, y=.resid)) + geom_point() +
geom_smooth(method="loess", method.args=list(degree=1))
head(concussion.logit.df)
concussion.logit.df$predict = ifelse(concussion.logit.df$.fitted.>=.5, 1, 0)
head(concussion.logit.df)
concussion.logit.df$predict = ifelse(concussion.logit.df$.fitted.>=.5, 1, 0)
concussion.logit.df$predict = ifelse(concussion.logit.df$.fitted>=.5, 1, 0)
error_rate = nrows(concussion.logit.df[where(concussion.logit.df$concussion_id!=concussion.logit.df$predict)])/nrows(concussion.logit.df)
error_rate = nrow(concussion.logit.df[where(concussion.logit.df$concussion_id!=concussion.logit.df$predict)])/nrow(concussion.logit.df)
error_rate = nrow(concussion.logit.df[concussion.logit.df$concussion_id!=concussion.logit.df$predict)]/nrow(concussion.logit.df)
error_rate = nrow(concussion.logit.df[concussion.logit.df$concussion_id!=concussion.logit.df$predict])/nrow(concussion.logit.df)
nrow(concussion.logit.df[concussion.logit.df$concussion_id!=concussion.logit.df$predict])/nrow(concussion.logit.df)
sum(concussion.logit.df$concussion_id!=concussion.logit.df$predict)
error_rate = sum(concussion.logit.df$concussion_id!=concussion.logit.df$predict)/nrow(concussion.logit.df)
error_rate
concussion.logit = glm(cbind(count_0, count_1)~gender+sport+academic_year, family=binomial(logit), data=concussion.wide)
concussion.logit.df = concussion.wide
concussion.logit.df$.fitted = fitted.values(concussion.logit)
concussion.logit.df$.resid = residuals(concussion.logit, type = 'response')
ggplot(concussion.logit.df, aes(x=.fitted, y=.resid)) + geom_point() + geom_smooth()
sum(concussion.logit.df$count_1)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyr)
library(VGAM)
concussion = read.table('http://www.stat.ufl.edu/~winner/data/concussion.dat')
colnames(concussion) = c('gender', 'sport', 'academic_year', 'concussion_id', 'count')
#vglm method
concussion.wide = concussion %>% spread(concussion_id, count)
colnames(concussion.wide)[4] = 'count_0'
colnames(concussion.wide)[5] = 'count_1'
concussion.logit = vglm(cbind(count_0, count_1)~gender+sport+academic_year, family=multinomial,
data=concussion.wide)
concussion.logit.df = concussion.wide
concussion.logit.df$.fitted = fitted.values(concussion.logit)
concussion.logit.df$.resid = residuals(concussion.logit, type = 'response')
#glm with cbind
concussion.logit = glm(cbind(count_0, count_1)~gender+sport+academic_year, family=binomial(logit), data=concussion.wide)
concussion.logit.df = concussion.wide
concussion.logit.df$.fitted = fitted.values(concussion.logit)
concussion.logit.df$.resid = residuals(concussion.logit, type = 'response')
ggplot(concussion.logit.df, aes(x=.fitted, y=.resid)) + geom_point() + geom_smooth()
#expanding the data
concussion.expanded = concussion[rep(seq_len(nrow(concussion)), concussion$count), 1:4]
concussion.logit = glm(concussion_id~gender+sport+academic_year, family = binomial,
data = concussion.expanded)
concussion.logit.df = concussion.expanded
concussion.logit.df$.fitted = fitted.values(concussion.logit)
concussion.logit.df$.resid = residuals(concussion.logit, type = 'response')
ggplot(unique(concussion.logit.df), aes(x=.fitted, y=.resid)) + geom_point() +
geom_smooth(method="loess", method.args=list(degree=1))
concussion.logit = glm(concussion_id~gender+sport+academic_year+gender:sport, family = binomial, data = concussion.expanded)
concussion.logit.df = concussion.expanded
concussion.logit.df$.fitted = fitted.values(concussion.logit)
concussion.logit.df$.resid = residuals(concussion.logit, type = 'response')
ggplot(unique(concussion.logit.df), aes(x=.fitted, y=.resid)) + geom_point() +
geom_smooth(method="loess", method.args=list(degree=1))
concussion.logit.df$predict = ifelse(concussion.logit.df$.fitted>=.5, 1, 0)
error_rate = sum(concussion.logit.df$concussion_id!=concussion.logit.df$predict)/nrow(concussion.logit.df)
error_rate
ggplot(concussion.wide[-1], aes(x=sport, y=count_1)) + facet_wrap(~gender+year, ncol=2)
concussion.table
head(concussion.wide)
library(vcd)
library(RColorBrewer)
ggplot(concussion.wide[-1], aes(x=sport, y=count_1)) + facet_wrap(~year, ncol=2)
library(vcd)
library(RColorBrewer)
ggplot(concussion.wide[-1], aes(x=sport, y=count_1)) + geom_bar() + facet_wrap(~year+gender, ncol=2)
library(vcd)
library(RColorBrewer)
ggplot(concussion.wide[-1], aes(x=sport, y=count_1)) + geom_bar(stat="identity") + facet_wrap(~year+gender, ncol=2)
library(vcd)
library(RColorBrewer)
ggplot(concussion.wide[-1], aes(x=sport, y=count_1)) + geom_bar(stat="identity") + facet_wrap(~year+gender, ncol=2)
library(vcd)
library(RColorBrewer)
ggplot(concussion.wide[-4], aes(x=sport, y=count_1)) + geom_bar(stat="identity") + facet_wrap(~year+gender, ncol=2)
library(vcd)
library(RColorBrewer)
ggplot(concussion.wide[,-4], aes(x=sport, y=count_1)) + geom_bar(stat="identity") + facet_wrap(~year+gender, ncol=2)
head(concussion.wide)
ggplot(concussion.wide, aes(x=sport, y=count_1)) + geom_bar(stat="identity") + facet_wrap(~gender)
ggplot(concussion.wide, aes(x=sport, y=count_1)) + geom_bar(stat="identity") + facet_wrap(~gender+year)
ggplot(concussion.wide, aes(x=sport, y=count_1)) + geom_bar(stat="identity") + facet_wrap(~gender)
ggplot(concussion.wide, aes(x=sport, y=count_1)) + geom_bar(stat="identity") + facet_grid(year~gender)
ggplot(concussion.wide, aes(x=sport, y=count_1, col=gender)) + geom_bar(stat="identity") + facet_wrap(~year)
ggplot(concussion.wide, aes(x=sport, y=count_1)) + geom_bar(stat="identity") + facet_wrap(~gender)
ggplot(concussion.wide, aes(x=sport, y=count_1)) + geom_bar(stat="identity") + facet_wrap(~academic_year)
ggplot(concussion.wide, aes(x=sport, y=count_1)) + geom_bar(stat="identity") + facet_wrap(~academic_year+gender)
ggplot(concussion.wide, aes(x=sport, y=count_1)) + geom_bar(stat="identity") + facet_wrap(~academic_year+gender, ncol=2)
library(vcd)
library(RColorBrewer)
ggplot(concussion.wide, aes(x=sport, y=count_1)) + geom_bar(stat="identity") + facet_wrap(~academic_year+gender, ncol=2)
concussion.table = xtabs(count_1~gender+sport+academic_year, data = concussion.wide[,-4])
mosaic(~ gender+sport+academic_year, concussion.table, highlighting="gender",highlighting_fill=brewer.pal(1,"Blues"))
library(vcd)
library(RColorBrewer)
ggplot(concussion.wide, aes(x=sport, y=count_1)) + geom_bar(stat="identity") + facet_wrap(~academic_year+gender, ncol=2)
concussion.table = xtabs(count_1~gender+sport+academic_year, data = concussion.wide[,-4])
mosaic(~ gender+sport+academic_year, concussion.table, highlighting="gender",highlighting_fill=brewer.pal(1,"Blues"))
library(vcd)
library(RColorBrewer)
ggplot(concussion.wide, aes(x=sport, y=count_1)) + geom_bar(stat="identity") + facet_wrap(~academic_year+gender, ncol=2) + labs(x='count')
concussion.table = xtabs(count_1~gender+sport+academic_year, data = concussion.wide[,-4])
mosaic(~ gender+sport+academic_year, concussion.table, highlighting="gender",highlighting_fill=brewer.pal(1,"Blues")) + labs(y="academic year")
library(vcd)
library(RColorBrewer)
ggplot(concussion.wide, aes(x=sport, y=count_1)) + geom_bar(stat="identity") + facet_wrap(~academic_year+gender, ncol=2) + labs(x='count')
concussion.table = xtabs(count_1~gender+sport+academic_year, data = concussion.wide[,-4])
mosaic(~ gender+sport+academic_year, concussion.table, highlighting="gender",highlighting_fill=brewer.pal(1,"Blues"))
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
pima = data(Pima.tr)
summary(pima)
?Pima.tr
library(MASS)
pima = data(Pima.tr)
head(pima)
library(MASS)
pima = data("Pima.tr")
head(pima)
library(MASS)
pima = data("Pima.tr")
head(pima)
library(MASS)
data("Pima.tr")
library(MASS)
data("Pima.tr")
head(Pima.tr)
?Pima.tr
?attach()
library(MASS)
data("Pima.tr")
attach(Pima.tr)
head(Pima.tr)
library(ggplot2)
data(wine)
library(ggbiplot)
data("wine")
attach(wine)
head(wine)
head(wine.class)
install.packages("RSQLite")
library(RSQLite)
?`dbConnect,SQLiteConnection-method`
library(RSQLite)
conn = dbConnect(drv = "SQLite", dbname = "soccer.sqlite")
alltables = dbListTables(conn)
Countries = dbGetQuery(con,'select * from Country' )
Leagues = dbGetQuery(con,'select * from League' )
Matches = dbGetQuery(con,'select * from Match' )
Players = dbGetQuery(con,'select * from Player' )
Player_attr = dbGetQuery(con,'select * from Player_Attributes' )
Teams = dbGetQuery(con,'select * from Team' )
Team_attr = dbGetQuery(con,'select * from Team_Attributes' )
sqllite_seq = dbGetQuery(con,'select * from sqlite_sequence' )
str(Countries)
head(Countries)
str(Leagues)
head(Leagues)
str(Matches)
head(Matches)
str(Players)
head(Players)
str(Player_attr)
head(Player_attr)
str(Teams)
head(Teams)
str(Team_attr)
head(Team_attr)
alltables = dbListTables(con)
library(RSQLite)
con = dbConnect(drv = "SQLite", dbname = "soccer.sqlite")
alltables = dbListTables(con)
Countries = dbGetQuery(con,'select * from Country' )
Leagues = dbGetQuery(con,'select * from League' )
Matches = dbGetQuery(con,'select * from Match' )
Players = dbGetQuery(con,'select * from Player' )
Player_attr = dbGetQuery(con,'select * from Player_Attributes' )
Teams = dbGetQuery(con,'select * from Team' )
Team_attr = dbGetQuery(con,'select * from Team_Attributes' )
sqllite_seq = dbGetQuery(con,'select * from sqlite_sequence' )
str(Countries)
head(Countries)
str(Leagues)
head(Leagues)
str(Matches)
head(Matches)
str(Players)
head(Players)
str(Player_attr)
head(Player_attr)
str(Teams)
head(Teams)
str(Team_attr)
head(Team_attr)
library(RSQLite)
con = dbConnect(drv = "SQLite", dbname = "soccer.sqlite")
alltables = dbListTables(con)
Countries = dbGetQuery(con,'select * from Country' )
Leagues = dbGetQuery(con,'select * from League' )
Matches = dbGetQuery(con,'select * from Match' )
Players = dbGetQuery(con,'select * from Player' )
Player_attr = dbGetQuery(con,'select * from Player_Attributes' )
Teams = dbGetQuery(con,'select * from Team' )
Team_attr = dbGetQuery(con,'select * from Team_Attributes' )
sqllite_seq = dbGetQuery(con,'select * from sqlite_sequence' )
str(Countries)
head(Countries)
str(Leagues)
head(Leagues)
str(Matches)
head(Matches)
str(Players)
head(Players)
str(Player_attr)
head(Player_attr)
str(Teams)
head(Teams)
str(Team_attr)
head(Team_attr)
# connect to the sqlite file
con = dbConnect(drv="SQLite", dbname="soccer.sqlite")
con = dbConnect(drv, dbname="soccer.sqlite")
library("RSQLite")
# connect to the sqlite file
drv<- dbDriver("SQLite")
con = dbConnect(drv, dbname="soccer.sqlite")
# get a list of all tables
alltables = dbListTables(con)
# get the populationtable as a data.frame
Countries = dbGetQuery(con,'select * from Country' )
Leagues = dbGetQuery(con,'select * from League' )
Matches = dbGetQuery(con,'select * from Match' )
Players = dbGetQuery(con,'select * from Player' )
Player_attr = dbGetQuery(con,'select * from Player_Attributes' )
Teams = dbGetQuery(con,'select * from Team' )
Team_attr = dbGetQuery(con,'select * from Team_Attributes' )
sqllite_seq = dbGetQuery(con,'select * from sqlite_sequence' )
str(Countries)
head(Countries)
str(Leagues)
head(Leagues)
str(Matches)
head(Matches)
str(Players)
head(Players)
str(Player_attr)
head(Player_attr)
str(Teams)
head(Teams)
str(Team_attr)
head(Team_attr)
getwd()
setwd(Desktop)
setwd(/Desktop)
setwd("/Desktop")
q()
knitr::opts_chunk$set(echo = TRUE)
avg_days_per_issue <- setNames(aggregate(champaign_closed$TIMESPAN,
list(champaign_closed$DESCRIPTION), mean),
c('DESCRIPTION', 'TIMESPAN'))
setwd("~/Desktop/HackIllinois-2018")
library(rgdal)
library(leaflet)
library(ggplot2)
library(dplyr)
champaign <- read.csv('data/all_cityworks_records.csv', stringsAsFactors = F)
## data preprocessing
champaign$DESCRIPTION <- as.factor(champaign$DESCRIPTION)
champaign$DATETIMECLOSED <- as.Date(champaign$DATETIMECLOSED, "%m/%d/%Y")
champaign$DATETIMEINIT <- as.Date(champaign$DATETIMEINIT, "%m/%d/%Y")
champaign$STATUS <- as.factor(champaign$STATUS)
champaign$PROBADDRESS <- as.factor(toupper(champaign$PROBADDRESS))
## data cleansing
# removing rows with empty values
champaign <- champaign[!(champaign$SRX=="" | champaign$SRY==""), ]
# removing commas from lat/long
champaign$SRX <- gsub(',',"",champaign$SRX)
champaign$SRY <- gsub(',',"",champaign$SRY)
# subsetting data into OPEN & CLOSED STATUSES
champaign_open = subset(champaign, STATUS=='OPEN' | STATUS=='Open')
champaign_closed = subset(champaign, STATUS=='CLOSED')
champaign_closed$TIMESPAN <- as.numeric(champaign_closed$DATETIMECLOSED -
champaign_closed$DATETIMEINIT)
# removing rows where DATETIMECLOSED < DATETIMEINIT
champaign_closed <- champaign_closed[!((champaign_closed$TIMESPAN)<0 |
is.na(champaign_closed$DATETIMECLOSED)),]
champaign_closed_sorted <- champaign_closed[order(-champaign_closed$TIMESPAN),]
champaign_closed_nad83 <- data.frame(long=as.double(champaign_closed$SRX),
lat=as.double(champaign_closed$SRY))
champaign_open_nad83 <- data.frame(long=as.double(champaign_open$SRX),
lat=as.double(champaign_open$SRY))
champaign_closed_sorted_nad83 <- data.frame(long=as.double(champaign_closed_sorted$SRX),
lat=as.double(champaign_closed_sorted$SRY))
# setting properties of the Spatial df
# EPSG:3435 for given .prj file
coordinates(champaign_closed_nad83) <- c('long','lat')
proj4string(champaign_closed_nad83)=CRS("+init=EPSG:3435")
coordinates(champaign_open_nad83) <- c('long','lat')
proj4string(champaign_open_nad83)=CRS("+init=EPSG:3435")
coordinates(champaign_closed_sorted_nad83) <- c('long','lat')
proj4string(champaign_closed_sorted_nad83)=CRS("+init=EPSG:3435")
#transforming from NAD83 Coordinate Ref. System to WGS84 (standard)
champaign_closed_wgs84 <- spTransform(champaign_closed_nad83, CRS("+init=epsg:4326"))
champaign_open_wgs84 <- spTransform(champaign_open_nad83, CRS("+init=epsg:4326"))
champaign_closed_sorted_wgs84 <- spTransform(champaign_closed_sorted_nad83,
CRS("+init=epsg:4326"))
icons_closed <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = "green"
)
icons_open <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = "red"
)
avg_days_per_issue <- setNames(aggregate(champaign_closed$TIMESPAN,
list(champaign_closed$DESCRIPTION), mean),
c('DESCRIPTION', 'TIMESPAN'))
avg_days_per_issue <- avg_days_per_issue[order(-avg_days_per_issue$TIMESPAN),]
ggplot(avg_days_per_issue[1:10,]) +
aes(TIMESPAN, DESCRIPTION) +
geom_col(fill='#FF6666') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab(c('Service request')) + ylab(c('Avg days to resolve')) +
ggtitle('Top 10 requests that took the most time to solve')
avg_days_per_issue <- setNames(aggregate(champaign_closed$TIMESPAN,
list(champaign_closed$DESCRIPTION), mean),
c('DESCRIPTION', 'TIMESPAN'))
avg_days_per_issue <- avg_days_per_issue[order(-avg_days_per_issue$TIMESPAN),]
ggplot(avg_days_per_issue[1:10,]) +
aes(TIMESPAN, DESCRIPTION) +
geom_bar(stat='identity', fill='#FF6666') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab(c('Service request')) + ylab(c('Avg days to resolve')) +
ggtitle('Top 10 requests that took the most time to solve')
avg_days_per_issue <- setNames(aggregate(champaign_closed$TIMESPAN,
list(champaign_closed$DESCRIPTION), mean),
c('DESCRIPTION', 'TIMESPAN'))
avg_days_per_issue <- avg_days_per_issue[order(-avg_days_per_issue$TIMESPAN),]
ggplot(avg_days_per_issue[1:10,]) +
aes(DESCRIPTION, TIMESPAN, fill='#FF6666') +
geom_col(stat='identity') + coord_flip() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab(c('Service request')) + ylab(c('Avg days to resolve')) +
ggtitle('Top 10 requests that took the most time to solve')
avg_days_per_issue <- setNames(aggregate(champaign_closed$TIMESPAN,
list(champaign_closed$DESCRIPTION), mean),
c('DESCRIPTION', 'TIMESPAN'))
avg_days_per_issue <- avg_days_per_issue[order(-avg_days_per_issue$TIMESPAN),]
ggplot(avg_days_per_issue[1:10,]) +
aes(DESCRIPTION, TIMESPAN, fill='#FF6666') +
geom_col(stat='identity') + coord_flip() +
xlab(c('Service request')) + ylab(c('Avg days to resolve')) +
ggtitle('Top 10 requests that took the most time to solve')
avg_days_per_issue <- setNames(aggregate(champaign_closed$TIMESPAN,
list(champaign_closed$DESCRIPTION), mean),
c('DESCRIPTION', 'TIMESPAN'))
avg_days_per_issue <- avg_days_per_issue[order(-avg_days_per_issue$TIMESPAN),]
ggplot(avg_days_per_issue[1:10,]) +
aes(DESCRIPTION, TIMESPAN) +
geom_col(fill='#FF6666') + coord_flip() +
xlab(c('Service request')) + ylab(c('Avg days to resolve')) +
ggtitle('Top 10 requests that took the most time to solve')
top_service_requests <- ggplot(avg_days_per_issue[1:10,]) +
aes(DESCRIPTION, TIMESPAN) +
geom_col(fill='#FF6666') + coord_flip() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab(c('Service request')) + ylab(c('Avg days to resolve')) +
ggtitle('Top 10 requests that took the most time to solve')
library(rgdal)
library(leaflet)
library(ggplot2)
library(dplyr)
champaign <- read.csv('data/all_cityworks_records.csv', stringsAsFactors = F)
## data preprocessing
champaign$DESCRIPTION <- as.factor(champaign$DESCRIPTION)
champaign$DATETIMECLOSED <- as.Date(champaign$DATETIMECLOSED, "%m/%d/%Y")
champaign$DATETIMEINIT <- as.Date(champaign$DATETIMEINIT, "%m/%d/%Y")
champaign$STATUS <- as.factor(champaign$STATUS)
champaign$PROBADDRESS <- as.factor(toupper(champaign$PROBADDRESS))
## data cleansing
# removing rows with empty values
champaign <- champaign[!(champaign$SRX=="" | champaign$SRY==""), ]
# removing commas from lat/long
champaign$SRX <- gsub(',',"",champaign$SRX)
champaign$SRY <- gsub(',',"",champaign$SRY)
# subsetting data into OPEN & CLOSED STATUSES
champaign_open = subset(champaign, STATUS=='OPEN' | STATUS=='Open')
champaign_closed = subset(champaign, STATUS=='CLOSED')
champaign_closed$TIMESPAN <- as.numeric(champaign_closed$DATETIMECLOSED -
champaign_closed$DATETIMEINIT)
# removing rows where DATETIMECLOSED < DATETIMEINIT
champaign_closed <- champaign_closed[!((champaign_closed$TIMESPAN)<0 |
is.na(champaign_closed$DATETIMECLOSED)),]
champaign_closed_sorted <- champaign_closed[order(-champaign_closed$TIMESPAN),]
champaign_closed_nad83 <- data.frame(long=as.double(champaign_closed$SRX),
lat=as.double(champaign_closed$SRY))
champaign_open_nad83 <- data.frame(long=as.double(champaign_open$SRX),
lat=as.double(champaign_open$SRY))
champaign_closed_sorted_nad83 <- data.frame(long=as.double(champaign_closed_sorted$SRX),
lat=as.double(champaign_closed_sorted$SRY))
# setting properties of the Spatial df
# EPSG:3435 for given .prj file
coordinates(champaign_closed_nad83) <- c('long','lat')
proj4string(champaign_closed_nad83)=CRS("+init=EPSG:3435")
coordinates(champaign_open_nad83) <- c('long','lat')
proj4string(champaign_open_nad83)=CRS("+init=EPSG:3435")
coordinates(champaign_closed_sorted_nad83) <- c('long','lat')
proj4string(champaign_closed_sorted_nad83)=CRS("+init=EPSG:3435")
#transforming from NAD83 Coordinate Ref. System to WGS84 (standard)
champaign_closed_wgs84 <- spTransform(champaign_closed_nad83, CRS("+init=epsg:4326"))
champaign_open_wgs84 <- spTransform(champaign_open_nad83, CRS("+init=epsg:4326"))
champaign_closed_sorted_wgs84 <- spTransform(champaign_closed_sorted_nad83,
CRS("+init=epsg:4326"))
icons_closed <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = "green"
)
icons_open <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = "red"
)
m_closed <- leaflet(champaign_closed_wgs84) %>% addTiles() %>%
addAwesomeMarkers(lng=champaign_closed_wgs84$long, lat=champaign_closed_wgs84$lat,
icon=icons_closed,
label = champaign_closed$DESCRIPTION,
popup = paste("Address:", champaign_closed$PROBADDRESS,
"<br><br>",
"Problem: ", champaign_closed$DESCRIPTION,
"<br><br>",
"Init date: ", champaign_closed$DATETIMEINIT,
"<br><br>",
"Days taken to resolve: ",
champaign_closed$TIMESPAN),
clusterOptions = markerClusterOptions())
m_open <- leaflet(champaign_open_wgs84) %>% addTiles() %>%
addAwesomeMarkers(lng=champaign_open_wgs84$long, lat=champaign_open_wgs84$lat,
icon=icons_open, label = champaign_open$DESCRIPTION,
popup = paste("Address:", champaign_open$PROBADDRESS,
"<br><br>",
"Problem: ", champaign_open$DESCRIPTION,
"<br><br>",
"Init date: ", champaign_open$DATETIMEINIT),
clusterOptions = markerClusterOptions())
# 20 requsts that took the most time to solve
m_most_time <- leaflet(champaign_closed_sorted_wgs84[1:20,]) %>% addTiles() %>%
addAwesomeMarkers(lng=champaign_closed_sorted_wgs84$long[1:20],
lat=champaign_closed_sorted_wgs84$lat[1:20],
icon=icons_closed,
label = champaign_closed_sorted$DESCRIPTION[1:20],
popup = paste("Address: ", champaign_closed_sorted$PROBADDRESS[1:20],
"<br><br>",
"Problem: ", champaign_closed_sorted$DESCRIPTION[1:20],
"<br><br>",
"Init date: ", champaign_closed_sorted$DATETIMEINIT[1:20],
"<br><br>",
"Days taken: ",
champaign_closed_sorted$TIMESPAN[1:20]))
# plot for Top 10 service requests
avg_days_per_issue <- setNames(aggregate(champaign_closed$TIMESPAN,
list(champaign_closed$DESCRIPTION), mean),
c('DESCRIPTION', 'TIMESPAN'))
avg_days_per_issue <- avg_days_per_issue[order(-avg_days_per_issue$TIMESPAN),]
top_service_requests <- ggplot(avg_days_per_issue[1:10,]) +
aes(DESCRIPTION, TIMESPAN) +
geom_col(fill='#FF6666') + coord_flip() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab(c('Service request')) + ylab(c('Avg days to resolve')) +
ggtitle('Top 10 requests that took the most time to solve')
# plot for Top 10 service addresses
avg_days_per_place <- setNames(aggregate(champaign_closed$TIMESPAN,
list(champaign_closed$PROBADDRESS), mean),
c('PROBADDRESS', 'TIMESPAN'))
avg_days_per_place <- avg_days_per_place[order(-avg_days_per_place$TIMESPAN),]
top_service_places <- ggplot(avg_days_per_place[1:10,]) +
aes(PROBADDRESS, TIMESPAN) +
geom_col(fill='#FF6666') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab(c('Address')) + ylab(c('Avg days to resolve'))
binpal <- colorBin("Reds", champaign_closed_sorted$TIMESPAN, 4, pretty = FALSE,
reverse = TRUE)
w <- leaflet(champaign_closed_sorted_wgs84[1:20,]) %>% addTiles() %>%
addCircles(lng = champaign_closed_sorted_wgs84$long[1:20],
lat = champaign_closed_sorted_wgs84$lat[1:20], weight = 0.5,
radius = sqrt(champaign_closed_sorted$TIMESPAN)*20 ,
color = binpal(champaign_closed_sorted$TIMESPAN),
popup = paste("Days to solve problem:",
champaign_closed_sorted$TIMESPAN[1:20], sep = ' '))
top_service_requests
